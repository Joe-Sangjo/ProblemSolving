https://www.youtube.com/watch?v=x45lr3ZhLKM&list=PLDV-cCQnUlIY4TMoRsrW0oqjCLTSm1nAf&index=2

Build Process

C++ 1. header file과 2. cpp file로 나뉘어져 있음

library도 static library, dynamic library가 있음. head only library도 있음.


빌드 과정
    1. preprocessor : #include , #define 등을 찾아서 처리함(translation unit을 만드는 것.)

    2. compiler : preprocessor에서 만들어진 translation unit을 object file로 바꿈.
                object file에는 code, data들이 들어 있음.

    3. linker : compiler에서 만들어진 object file에서 executable 하기 위한 additinal information이 들어감

    여기 까지 오면 process가 만들어짐.                


컴파일 옵션들
    1. -o : output file 이름 변경
    2. -Wall : warning을 만들어 낼 수 있음.
    3. -Werror : warning이 있으면 compile이 아예 되지 않음.
    4. -O : optimazation O0, O1, O2 등으로 할 수 있음. 최적화..
    5. -march : machine에 맞춰진 binary를 만들 수 있음. 
    6. -c : object file을 만들 수 있음.


Build Process
    1. Preprocess
    2. Complie
    3. Link


Header File에서는 declaration만 따로 관리할 수 있음
include 한 cpp파일과 include 된 headfile이 합쳐져서 translation unit이 만들어진다.





Preprocess
    1. #include 
    2. #define
    3. #ifdef
    4. #pragma once

    등 #이 들어가는 것들을 처리 함.

    - modern C++에서는 #을 최대한 적게 쓰는게 좋음.
      standard library를 쓰는 것이 좀 더 안전한 코드임.
      #define도 constexpr을 사용하는 것이 좀 더 좋음.

    - __FILE__, __LINE__, __DATE__, __TIME__ 등은 미리 정의 되어 있음.
    __DATE__, __TIME__ 은 compile time을 나타냄.

    - #include 에서 만약 중복이 된다면(#include 된 곳에서 이미 #include 가 되어 있는 경우)
      #ifndef CAT_H <- CAT_H가 정의 되어 있지 않다면,
      #define CAT_H <- CAT_H를 정의해라
        ...
      #endif
      
    - #pragma once <- 아무런 중복 정의 문제 없이 compile이 됨. 모든 header file위에 #pragma once를 쓰면 된다!


    - modern C++에서는
        #define, #ifdef, #ifndef 는 constexpr if, constexpr, c++ standard library를 사용하는 것을 추천
        #include 는 copy & paste의 역할을 하는데 중복 문제를 막기 위해서 모든 header file에 #pragma once를 쓰면 됨
    


Extern, Static 

    Linking과 관련됨
    - extern : 밖에서 관련 keyword를 찾아라. 
    - static : 안쪽에서만 link를 해라.

    - 함수의 경우. declaration이 같은 file안에만 있는 경우, extern이 default로 들어감.

    - class 의 경우 xxx.cpp 파일에서 static 함수로 xxx 클래스의 멤버함수만 호출 가능한 함수가 될 수 있음.alignas

    - extern "C" : function overloading이 없음. -> mangling을 없앰.
    - name manging : object file에서 함수이름이 조금 바뀜 -> function overloading을 가능하게 하기 위해서
                    실제 object file에서는 다른 함수가 되는 것.



Assembly
    1. *2, *4, /2, /4를 할 때 bitshift 연산 <<1 <<2 >>1 >>2 하는 연산을 볼 수 있는데
    굳이 할 필요가 없다.

    2. Assembly가 더 짧다고 더 빠른 코드는 아니다

    3. g++에서는 switch-case 문이 if-else 문보다 더 빠른 코드를 만들어 냈지만,
        clang에서는 switch-case / if-else 문이 완벽하게 똑같은 assembly code를 만들어 냄.


Debug
    
    Debug Mode.
    - g++ -g 옵션
    - DWARF : binary(machine code)를 cpp source와 연결해주는 infomation들이 있음. -g가 이 infomation들을
    넣어주는 것라고 생각하면 됨. (-O를 두지 않는 것이 일반적 or -Og를 주거나)

    $ gdg
    $ start <- 코드를 한줄 한줄 실행 시킬 수 있음. 
    $ next <- 코드 한줄 넘어감.
    CTL + x + a <- interactive 하게 코드를 실행할 수 있으.ㅁ
    $ n  <- 코드 한 줄 넘어 감
    $ break 26 <- 26번째 줄에 breakpoint
    $ break sub <- sub 함수에 breakpoint를 걸 수 있음.  
    $ continue <- breakpoint에서 멈춤.
    $ stop <- 함수 안으로 들어감
    $ print vIn <- vIn 변수가 이루고 있는 것들을 보여줌
    CTL + X,2 <- assembly code가 나옴.
    $ bt <- call stack을 알 수 있음.


Library
    이미 만들어진 code나 binary를 가져와서 프로그래밍을 하는데 사용할 수 있는 것들.
    c++ standard library
    Header Only, Static Library, Dynamic Library 로 나눌 수 있음.

    1. Header Only
    2. Static Library : .lib(window), .a(linux) 파일. build time에 linker가 가져와서 사용한다고 보면 됨
    3. Dynamic Library : load time(loader가 실행 시킨다. )이나 runtime(process가 실행하는 도중에 가져오는 것)
        에 binding할 수 있음. .dll(window), .so(linux)


    Static Library
    1. compile시에
        main.cpp -> main.o
        cat.cpp -> cat.o
        foo.cpp -> foo.o 
    로 변환. 각 object file에는 code, data section이 있음 
    Link는  하나의 실행파일을 만듬
    2. Link 
        하나의 실행파일에 code/data 영역에서 relocation, selection 을 하게 됨(실제로 사용되는 함수나 변수들을
        Linker의 optimization의 option에 따라 재배치를 함). 하나의 실행파일을 만들어짐.

        사실은 Linker가 실행되기 전에 object file을 만들어서 하나의 archive file로 만듦. libxxx.a <- 이 것이 하나의
        static library
        Linker는 이 .a 파일을 가져와서 relocation과 selection을 해서 실행파일을 만든다.



Dynamic Library

    process runtime, load time에 binding이 됨
    (static library는 linktime에 binding 됨)

    -fPIC 라는 option을 주면 .a가 아니라 .so로 만들어짐

    Load할 때 보통 많이 쓰는 것이 좋음
    
    Runtime시에 binding 하는 방법은,
    dlopen(), dlsym(), dlerror(), dlclose()를 이용해서 source code 에서 구현해주면 됨.
    ex)
        foo.cpp
        #include <iosteam>

        void foo(){
            std::cout<<"foo"<<std::endl;
        }

        main.cpp
        #include <dlfcn.h>
        #include <iostream>

        int main(){

            void *handle = dlopen("./libfoo.so", RTLD_LAZY);
            if(!handle){
                std::cout << "No Library"<< std::endl;
                return 1;
            }

            void (*fooPrtr)();
            fooPrtr = (void(*)())dlsym(handle, "_Z3foov");
            const char * dlsym_error = dlerror();
            if(dlsym_error){
                std::cout <<" No Symbol" << std::endl;
                return 1;
            }
            (*fooPtr)();
            dlclose(handle);
            return 0;
        }
