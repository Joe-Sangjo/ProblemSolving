OOP의 중심이 되는 4가지 속성
    1. Abstraction : Class라는 것 자체가 추상화를 하게 되는 것
    2. Encapsulation : data를 캡슐화로 내부에 적어 놓고 외부에서 접근하게 불가능하게 만든다는 것. private
    3. Inheritance
    4. Polymorphism : 다형성인데, function overloading(static), function overriding(dynamic) 

프로그램 목적이
    1. easy to read
    2. easy to understand
    3. easy to modify
    가 더 목적이어야 하지 OOP가 목적이 되면 안됨.
    1, 2, 3을 위해 OOP를 사용하는 것임.




Object in memory

    Object Alignment..
    멤버 변수는 8byte 단위로 시작해야 한다.(padding)

    parallel programming을 할 때 각 core가 cache를 공유하는데,
    64byte로 cache line이 되어 있으면 그 것이 cache에서 core가 data를 가져가는 단위가 됨
    그런데 object의 크기가 cache로 나눠떨어지거나 하지 않으면, data가 짤려서 
    다른 core에 들어갈 수도 있음
    이를 방지 하기 위한 것이 alignas(32) 같은 것들이다.



Static, Class

    1. static member function
        - 굳이 object를 만들지 않아도 호출할 수 있음.
        - static member function에서 member variable, member function에 접근할 수 없음.
        - this를 통해 object들에 접근하지 않음

    2. static member variable
        - 프로그램이 실행되기 전에 초기화를 시켜줘야 함.
        - 같은 Class의 다른 object들에서 모두 접근할 수 있음.
        - static area에 들어가 있음. object에 귀속되어 있지 않음.
        - public에 static variable를 만들면 아무대서나 접근 가능. private에 놓는 것도 때에 따라 필요함.




Copy / Move Constructor

    만약 멤버 변수로 raw pointer를 사용하게 되면, 
    Desctructor, Copy Constructor, Move Constructor, Copy Assignment, Move Assignment를 직접 구현해야
    한다.

    Copy Constructor - 기존 object의 내부 정보를 이용해서 새로운 object를 만드는 것.
                     - Constructor가 같은 class의 const &로 변수를 받는 경우
                     ex)
                     Cat(const Cat& other) : nName{other.Name}, mAge{other.mAge};

    Move Constructor - 기존 object들의 정보를 이용해서 새로운 object를 만드는데,
                     - 기본 object의 내부 정보를 다 잃게 만느는 것  

                     ex) other의 mName의 pointer 연결을 끊음
                     Cat(Cat&& other) : nName{std::move(other.mName)}, mAge{other.mAge}



Copy / Move Assignment

    object1 = object2  //이런 코드가 있을 때 불리는 함수를 Copy Assignment 라고 함

    Cat& operator=(const &Cat other){
        if(&other == this){
            return *this;
        }
        mName = other.mName;
        mAge = other.mAge;
        return *this;
    }

    
    //Move Assignment
    Cat& operator=(const &Cat other){
        if(&other == this){
            return *this;
        }
        mName = std::move(other.mName);
        mAge = other.mAge;
        return *this;
    }

    object1 = std::move(object2)  // R value로 object2의 내용을 뺏어오는 것



    - Desctructor, Move Assignment, Move Constructor는 exception이 던져지지 않게
    noexcept를 키워드를 넣는게 좋음

    - 실질적으로 pointer를 통해서 member variable이 없으면 Desctructor, Move / Copy Constructor, Move / Copy Assignment
    를 만들어줄 필요는 없음. 컴파일러가 알아서 만들어준다.
    생산성을 중요하게 생각하는 프로그래머라면 member variable에 pointer를 두지 않음.


    Cat kitty{"kitty", 1};
    Cat kitty2{kitty};              //Copy Constructor
    Cat kitty3{std::move(kitty)};   //move Constructor

    Cat nabi{"nabi", 2};
    kitty = nabi;       //copy Assignment
    kitty = std::move(nabi) //move Assignment





function overloading <- name mangling

operator overloading
