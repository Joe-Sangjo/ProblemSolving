
1. 문제를 읽고 이해한다.

학생의 숫자와 친구 순서쌍이 입력으로 주어지면, 그를 통해 짝이 될 수 있는 경우의 수를 계산하는 문제이다.
이때 짝이 될 수 있는 경우의 수이므로 짝 내에서는 순서는 상관이 없다.

2. 문제를 익숙한 용어로 재정의한다.

짝이 될 수 있는 경우의 수를 구하는 것.!!

3. 어떻게 해결할지 계획을 세운다.

array를 만들어서 i 와 j 가 친구가 된다면 array[i][j] = array[j][i] = 1 로 만들어 버린다.
나머지는 0;

그런 다음 순서쌍을 모두 만들어 본다음, 각각의 경우에 친구가 아닌 쌍이 있을 경우에 그 경우는 지워 버린다.
그렇다면 어떻게 모든 순서쌍을 만들 수 있을까?
모든 순서쌍의 경우의 수를 구하기는 쉽다.
N 명의 아이가 있다면 모든 순서쌍의 경우의 수는 n_C_2 x n-2_C_2 x n-4_C_2 x ... x 2_C_2 이다...
아 여기서도 순서쌍들도  중복되니까 (n/2)! 으로 나누어 줘야겠나?
마저 나눠줘야해 순서쌍들의 개수가 N/2 개이니...
쨋든 여기까지가 경우의 수이긴 한데.. 

이 것을 어떻게 표현을 해서 표현한 것이 친구인지 아닌지 어떻게 확인을 한다는 말인가?
여기서 재귀 함수를 써야되는 것인가?

모든 순서쌍을 표현하는 것이 내 알고리즘의 핵심이다.

표현한 다음 친구인지 아닌지 확인만 하면 되니까...

4. 계획을 검증한다.
5. 프로그램으로 구현한다.
6. 어떻게 풀었는지 돌아보고, 개선할 방법이 있는지 찾아본다.